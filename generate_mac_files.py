import uproot
import numpy as np
import os
import random
import matplotlib.pyplot as plt

def generate_mac_files():
    """
    Generates 10,000 .mac files for a RAT-PAC simulation and plots distributions.

    This script reads muon kinetic energy and angular distribution histograms
    from a ROOT file. It then generates .mac files with randomized
    muon starting positions and directions based on these distributions.
    Finally, it plots the distributions of the generated vertex, direction, and energy.
    """
    # --- Configuration ---
    num_files = 50000
    events_per_file = 10
    output_directory = "cosmic_mass4"
    root_file_path = "cosmic_input.root"
    ke_muon_hist_name = "keMuon"
    costhe_hist_name = "costhe"

    # Muon rest mass in MeV/c^2
    muon_rest_mass = 105.6583755

    # --- Create Output Directory ---
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)
        print(f"Created directory: {output_directory}")

    # --- Load Histograms from ROOT file ---
    try:
        with uproot.open(root_file_path) as file:
            # Fetch histograms
            ke_muon_hist = file[ke_muon_hist_name]
            costhe_hist = file[costhe_hist_name]

            # Get bin edges and contents (probabilities)
            ke_bin_edges = ke_muon_hist.axis().edges()
            ke_counts = ke_muon_hist.values()
            ke_probabilities = ke_counts / np.sum(ke_counts)

            costhe_bin_edges = costhe_hist.axis().edges()
            costhe_counts = costhe_hist.values()
            costhe_probabilities = costhe_counts / np.sum(costhe_counts)

    except Exception as e:
        print(f"Error opening or reading ROOT file '{root_file_path}': {e}")
        print("Please ensure the file exists and the histogram names are correct.")
        return

    # --- Lists to store generated data for plotting ---
    positions_x, positions_y, positions_z = [], [], []
    directions_x, directions_y, directions_z = [], [], []
    energies = []


    # --- Generate .mac Files ---
    for i in range(num_files):
        # 1. Sample Kinetic Energy
        # We sample the bin index first, then pick a random value within that bin
        ke_bin_index = np.random.choice(len(ke_probabilities), p=ke_probabilities)
        ke_low = ke_bin_edges[ke_bin_index]
        ke_high = ke_bin_edges[ke_bin_index + 1]
        kinetic_energy = random.uniform(ke_low, ke_high)
        total_energy = kinetic_energy + muon_rest_mass # Total energy = KE + rest mass

        # 2. Sample Cos(theta) and calculate direction vectors
        costhe_bin_index = np.random.choice(len(costhe_probabilities), p=costhe_probabilities)
        costhe_low = costhe_bin_edges[costhe_bin_index]
        costhe_high = costhe_bin_edges[costhe_bin_index + 1]
        cos_theta = random.uniform(costhe_low, costhe_high)
        
        # Ensure cos_theta is within the valid range [-1, 1]
        cos_theta = np.clip(cos_theta, -1.0, 1.0)
        
        sin_theta = np.sqrt(1.0 - cos_theta**2)

        # Randomize phi for a uniform distribution around the y-axis
        phi = random.uniform(0, 2 * np.pi)
        
        # Direction cosines
        mudirx = sin_theta * np.cos(phi)
        mudiry = cos_theta # Assuming theta is the angle with the y-axis
        mudirz = sin_theta * np.sin(phi)

        # 3. Randomize Position
        # Convert from meters to millimeters for Geant4
        muposx = random.uniform(-30000, 30000)
        muposy = random.uniform(3000, 4000)
        muposz = random.uniform(-30000, 100000)
        
        # Store data for plotting
        positions_x.append(muposx)
        positions_y.append(muposy)
        positions_z.append(muposz)
        directions_x.append(mudirx)
        directions_y.append(mudiry)
        directions_z.append(mudirz)
        energies.append(total_energy)


        # 4. Construct the .mac file content
        mac_content = f"""
# Muon simulation file {i+1}/{num_files}
# Generated by Python script

#/glg4debug/glg4param omit_muon_processes 0.0
#/glg4debug/glg4param omit_hadronic_processes 0.0

# --- Detector Parameters ---
/rat/db/set DETECTOR experiment "End"
/rat/db/set DETECTOR geo_file "End/END.geo"

/run/initialize

# --- Processors ---
/rat/proc simpledaq
/rat/proc count
/rat/procset update 1

/rat/proclast outroot
/rat/procset file "output2_{i+1}.root"
#/rat/proclast outntuple
/rat/procset include_mcparticles 1

# --- Generator Settings ---
/generator/add combo gun:point:poisson
/generator/vtx/set mu- {mudirx:.6f} {mudiry:.6f} {mudirz:.6f} {total_energy:.6f}
/generator/pos/set {muposx:.6f} {muposy:.6f} {muposz:.6f}

# --- Run ---
/run/beamOn {events_per_file}
"""

        # 5. Write to file
        file_path = os.path.join(output_directory, f"muon_run_{i+1}.mac")
        with open(file_path, 'w') as f:
            f.write(mac_content)

    print(f"\nSuccessfully generated {num_files} .mac files in '{output_directory}'.")
    
    # --- Plotting ---
    print("Generating plots...")
    
    # Plotting font size configuration
    plt.rcParams.update({
        'font.size': 18,
        'axes.titlesize': 24,
        'axes.labelsize': 20,
        'xtick.labelsize': 16,
        'ytick.labelsize': 16,
        'legend.fontsize': 18,
    })

    # 1. Vertex Position Plot (3D)
    fig = plt.figure(figsize=(12, 12))
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(positions_x, positions_z, positions_y, s=1, alpha=0.5) # Swapped y and z for typical detector view
    ax.set_title("Generated Muon Vertex Positions", pad=20)
    ax.set_xlabel("X Position (mm)")
    ax.set_ylabel("Z Position (mm)")
    ax.set_zlabel("Y Position (mm)")
    ax.view_init(elev=20., azim=-45)

    # 2. Energy and Direction Plots
    fig2, axs = plt.subplots(2, 2, figsize=(20, 18))
    fig2.suptitle('Generated Muon Distributions', fontsize=30)

    # Energy
    axs[0, 0].hist(energies, bins=100, color='royalblue')
    axs[0, 0].set_title("Total Energy Distribution (MeV)", pad=15)
    axs[0, 0].set_ylabel("Counts")
    axs[0, 0].set_yscale('log')

    # Direction Cosine X
    axs[0, 1].hist(directions_x, bins=100, color='seagreen')
    axs[0, 1].set_title("Direction Cosine (X)", pad=15)
    axs[0, 1].set_ylabel("Counts")

    # Direction Cosine Y
    axs[1, 0].hist(directions_y, bins=100, color='coral')
    axs[1, 0].set_title("Direction Cosine (Y)", pad=15)
    axs[1, 0].set_ylabel("Counts")

    # Direction Cosine Z
    axs[1, 1].hist(directions_z, bins=100, color='mediumpurple')
    axs[1, 1].set_title("Direction Cosine (Z)", pad=15)
    axs[1, 1].set_ylabel("Counts")

    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()


if __name__ == "__main__":
    # Before running, ensure you have the necessary libraries:
    # pip install uproot numpy matplotlib
    generate_mac_files()

